#!/usr/bin/python3
# coding: utf-8
import argparse
from PIL import Image
from picamera import PiCamera
import fastzbarlight
import actfw
from actfw.task import Pipe, Consumer

(CAPTURE_WIDTH, CAPTURE_HEIGHT) = (320, 240)  # capture image size
(DISPLAY_WIDTH, DISPLAY_HEIGHT) = (640, 480)  # display area size


class Converter(Pipe):

    def __init__(self):
        super(Converter, self).__init__()

    def proc(self, frame):
        rgb_image = Image.frombuffer('RGB', (CAPTURE_WIDTH, CAPTURE_HEIGHT), frame.getvalue(), 'raw', 'RGB')
        gray_image = rgb_image.convert('L')
        codes = fastzbarlight.scan_codes('qrcode', gray_image)
        return (rgb_image, codes)


class Presenter(Consumer):

    def __init__(self, settings, camera, cmd):
        super(Presenter, self).__init__()
        self.settings = settings
        self.camera = camera
        self.cmd = cmd
        self.history = {}
        if self.settings['display']:
            self.display = actfw.Display(camera, (DISPLAY_WIDTH, DISPLAY_HEIGHT))

    def proc(self, images):
        rgb_image, codes = images
        self.cmd.update_image(rgb_image)  # update `Take Photo` image
        if codes is not None:
            codes = [code.decode('utf-8') for code in codes]
            for code in codes:
                if code not in self.history:
                    actfw.notify([{'codes': codes}])
                self.history[code] = 300
        else:
            codes = []
        self.history = dict([(k, v-1) for k, v in self.history.items() if v > 0])
        actfw.heartbeat()
        if self.settings['display']:
            self.display.update((0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT), rgb_image.tobytes(),
                                (CAPTURE_WIDTH, CAPTURE_HEIGHT), 'rgb')


def main(args):

    # Create picamera object
    camera = PiCamera()
    camera.resolution = (CAPTURE_WIDTH, CAPTURE_HEIGHT)
    camera.framerate = 30

    # Actcast application
    app = actfw.Application()

    # Load act setting
    settings = app.get_settings({'display': True})

    # CommandServer (for `Take Photo` command)
    cmd = actfw.CommandServer()
    app.register_task(cmd)

    # Capture task
    cap = actfw.capture.PiCameraCapture(camera, format='rgb', use_video_port=True)
    app.register_task(cap)

    # Converter task
    conv = Converter()
    app.register_task(conv)

    # Presentation task
    pres = Presenter(settings, camera, cmd)
    app.register_task(pres)

    # Make task connection
    cap.connect(conv)  # from `cap` to `conv`
    conv.connect(pres)  # from `conv` to `pres`

    # Start application
    app.run()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='example: Convertion to grayscale image')
    main(parser.parse_args())
