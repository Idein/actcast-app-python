#!/usr/bin/python3
import argparse
from PIL import Image
import actfw
from actfw.vc4 import Display
from actfw.task import Pipe, Consumer

(CAPTURE_WIDTH, CAPTURE_HEIGHT) = (320, 240)  # capture image size
(DISPLAY_WIDTH, DISPLAY_HEIGHT) = (640, 480)  # display area size


class Converter(Pipe):

    def __init__(self):
        super(Converter, self).__init__()

    def proc(self, frame):
        rgb_image = Image.frombuffer('RGB', (CAPTURE_WIDTH, CAPTURE_HEIGHT), frame.getvalue(), 'raw', 'RGB')
        gray_image = rgb_image.convert('L')
        return (rgb_image, gray_image)


class Presenter(Consumer):

    def __init__(self, preview, cmd):
        super(Presenter, self).__init__()
        self.preview = preview
        self.cmd = cmd

    def proc(self, images):
        rgb_image, gray_image = images
        histo = gray_image.histogram()
        self.cmd.update_image(rgb_image)  # update `Take Photo` image
        actfw.notify([{'histogram': histo}])
        actfw.heartbeat()
        if self.preview is not None:
            gray_image = gray_image.convert('RGB')
            self.preview.blit(gray_image.tobytes())
            self.preview.update()


def main(args):

    # Actcast application
    app = actfw.Application()

    # Load act setting
    settings = app.get_settings({'display': True})

    def run(preview=None):

        # CommandServer (for `Take Photo` command)
        cmd = actfw.CommandServer()
        app.register_task(cmd)

        # Capture task
        cap = actfw.capture.V4LCameraCapture('/dev/video0', (CAPTURE_WIDTH, CAPTURE_HEIGHT), 30)
        app.register_task(cap)

        # Converter task
        conv = Converter()
        app.register_task(conv)

        # Presenter task
        pres = Presenter(preview, cmd)
        app.register_task(pres)

        # Make task connection
        cap.connect(conv)  # from `cap` to `conv`
        conv.connect(pres)  # from `conv` to `pres`

        # Start application
        app.run()

    if settings['display']:
        with Display() as display:
            width, height = display.size()
            with display.open_window((0, 0, width, height), (32, 1), 1000) as background:
                with display.open_window(((width-DISPLAY_WIDTH)//2, (height-DISPLAY_HEIGHT)//2, DISPLAY_WIDTH, DISPLAY_HEIGHT), (CAPTURE_WIDTH, CAPTURE_HEIGHT), 2000) as preview:
                    run(preview)
    else:
        run()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='example: capture from UVC camera')
    main(parser.parse_args())
