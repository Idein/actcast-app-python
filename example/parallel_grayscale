#!/usr/bin/python3
import argparse
from PIL import Image
from picamera import PiCamera
import actfw
from actfw.task import Pipe, Consumer

(CAPTURE_WIDTH, CAPTURE_HEIGHT) = (320, 240) # capture image size
(DISPLAY_WIDTH, DISPLAY_HEIGHT) = (640, 480) # display area size

class Converter(Pipe):

    def __init__(self, converter_id):
        super(Converter, self).__init__()
        self.converter_id = converter_id

    def proc(self, frame):
        rgb_image = Image.frombuffer('RGB', (CAPTURE_WIDTH, CAPTURE_HEIGHT), frame.getvalue(), 'raw', 'RGB')
        gray_image = rgb_image.convert('L')
        return (self.converter_id, rgb_image, gray_image)

class Presenter(Consumer):

    def __init__(self, settings, camera, cmd):
        super(Presenter, self).__init__()
        self.settings = settings
        self.camera = camera
        self.cmd = cmd
        if self.settings['display']:
            self.display = actfw.Display(camera, (DISPLAY_WIDTH, DISPLAY_HEIGHT))

    def proc(self, images):
        converter_id, rgb_image, gray_image = images
        self.cmd.update_image(rgb_image) # update `Take Photo` image
        actfw.notice([{'converter':converter_id}])
        actfw.heartbeat()
        if self.settings['display']:
            gray_image = gray_image.convert('RGB')
            self.display.update((0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT), gray_image.tobytes(), (CAPTURE_WIDTH, CAPTURE_HEIGHT), 'rgb')

def main(args):

    # Create picamera object
    camera = PiCamera()
    camera.resolution = (CAPTURE_WIDTH, CAPTURE_HEIGHT)
    camera.framerate = 30

    # Actcast application
    app = actfw.Application()

    # Load act setting
    settings = app.get_settings({'display': True})

    # CommandServer (for `Take Photo` command)
    cmd = actfw.CommandServer()
    app.register_task(cmd)

    # Capture task
    cap = actfw.capture.PiCameraCapture(camera, format='rgb', use_video_port=True)
    app.register_task(cap)

    # Converter task
    convs = [ Converter(0), Converter(1) ]
    for conv in convs:
        app.register_task(conv)

    # Presentation task
    pres = Presenter(settings, camera, cmd)
    app.register_task(pres)

    # Make task connection
    for conv in convs:
        cap.connect(conv)  # from `cap` to `conv`
        conv.connect(pres) # from `conv` to `pres`

    # Start application
    app.run()

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='example: Convertion to grayscale image')
    main(parser.parse_args())
